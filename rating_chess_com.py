# -*- coding: utf-8 -*-
"""Rating_chess.com.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tvQLsqWlrUBcfC5ix6NlBHioN0xVmwF4
"""

import json
import requests

# Make a request to the API
username = "Sayak_K"
response = requests.get(f"https://www.chess.com/callback/user/popup/{username}")
data = response.json()

# Pretty print the JSON data
print(json.dumps(data, indent=4))

import json
import requests

# Make a request to the API
username = "Sayak_K"
response = requests.get(f"https://www.chess.com/callback/user/popup/{username}")
data = response.json()

# Extract the required values
rating = int(data["bestRating"])
rating_type = data["bestRatingType"].upper()
puzzle_score = int(data["topPuzzleRushScore"])
puzzle_type = data["topPuzzleRushScoreType"].upper()

# Store the extracted values in capital letters and big size format
BEST_RATING = rating
BEST_RATING_TYPE = rating_type
TOP_PUZZLE_RUSH_SCORE = puzzle_score
TOP_PUZZLE_RUSH_SCORE_TYPE = puzzle_type

# Print the extracted values (optional)
print("Best Rating:", rating)
print("Best Rating Type:", rating_type)
print("Top Puzzle Rush Score:", puzzle_score)
print("Top Puzzle Rush Score Type:", puzzle_type)

import matplotlib.pyplot as plt

# Define the text to be printed in the PNG
text = f"""
BEST RATING: {rating}
BEST RATING TYPE: {rating_type}
TOP PUZZLE RUSH SCORE: {puzzle_score}
TOP PUZZLE RUSH SCORE TYPE: {puzzle_type}
"""

# Set up the plot
fig, ax = plt.subplots(figsize=(8, 6))
ax.text(0.5, 0.5, text, va='center', ha='center', fontsize=12)

# Hide axes
ax.axis('off')

# Save the plot as a PNG file
plt.savefig('extracted_values.png', bbox_inches='tight', dpi=300)

# Show the plot (optional)
plt.show()

import requests
from PIL import Image
import matplotlib.pyplot as plt

# Fetch the image content from GitHub
github_url = "https://github.com/SayakKDutta/SayakKDutta/blob/main/phpogr0qU.png?raw=true"
response = requests.get(github_url)
image_content = Image.open(BytesIO(response.content))

# Define the text to be printed in the PNG
text = f"""
BEST RATING   {rating}

BEST RATING
   TYPE             {rating_type}

TOP PUZZLE
RUSH SCORE   {puzzle_score}

TOP PUZZLE
RUSH SCORE   {puzzle_type}
   TYPE
"""


# Create a figure with the same size as the background image
fig, ax = plt.subplots(figsize=(20, 8))

# Plot the background image
ax.imshow(image_content)

# Plot the text on top of the background image
ax.text(0, 0, text, va='top', ha='left', fontsize=24, color='white', fontweight='bold')

# Hide axes
ax.axis('off')

# Save the plot as a PNG file
plt.savefig('extracted_values.png', bbox_inches='tight', dpi=300)

# Show the plot (optional)
plt.show()

import requests
from PIL import Image
from io import BytesIO
import matplotlib.pyplot as plt
import os

# Fetch the image content from GitHub
github_url = "https://github.com/SayakKDutta/SayakKDutta/blob/main/phpogr0qU.png?raw=true"
response = requests.get(github_url)
image_content = Image.open(BytesIO(response.content))

# Define the text to be printed in the PNG
# Define the text to be printed in the PNG
text = f"""
BEST RATING   {rating}

BEST RATING
   TYPE             {rating_type}

TOP PUZZLE
RUSH SCORE   {puzzle_score}

TOP PUZZLE
RUSH SCORE   {puzzle_type}
   TYPE
"""

# Create a figure with the same size as the background image
fig, ax = plt.subplots(figsize=(20, 8))

# Plot the background image
ax.imshow(image_content)

# Plot the text on top of the background image
ax.text(0, 0, text, va='top', ha='left', fontsize=24, color='white', fontweight='bold')

# Hide axes
ax.axis('off')

# Create a buffer for the image data
buffer = BytesIO()
plt.savefig(buffer, format='png')  # Save the plot to the buffer as PNG
buffer.seek(0)  # Reset the buffer position to the beginning

# Set the directory where you want to save the file
save_directory = "assets/"
os.makedirs(save_directory, exist_ok=True)  # Create the directory if it doesn't exist
file_path = os.path.join(save_directory, 'plot2.png')  # Construct the file path

# Write the image data from the buffer to the file
with open(file_path, "wb") as f:
    f.write(buffer.read())

buffer.close()  # Close the buffer

